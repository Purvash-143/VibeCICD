name: Insurance App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  KUBERNETES_NAMESPACE: ${{ vars.KUBERNETES_NAMESPACE }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  # Stage 1: GitLeaks Security Scan
  gitleaks:
    name: üîç GitLeaks - Secret Detection
    runs-on: ubuntu-latest
    continue-on-error: true  # Warn but don't fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload GitLeaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.sarif
          retention-days: 5

  # Stage 2: Linting - ESLint and Prettier (Sequential - runs after GitLeaks)
  linting:
    name: üßπ Code Linting & Syntax Check
    runs-on: ubuntu-latest
    needs: gitleaks  # Wait for GitLeaks to complete
    continue-on-error: true  # Warn but don't fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Check package files
        run: |
          echo "Checking package files in main directory..."
          echo "Current directory: $(pwd)"
          echo "Listing all files:"
          ls -la
          echo "Looking for package files specifically:"
          find . -name "package*.json" -o -name "package-lock.json" | head -5

      - name: Install dependencies
        run: |
          echo "Checking for package files..."
          if [ -f package-lock.json ] && [ -f package.json ]; then
            echo "Found both package.json and package-lock.json - using npm ci"
            npm ci --prefer-offline --no-audit
          elif [ -f package.json ]; then
            echo "Found package.json but no package-lock.json - using npm install"
            npm install --prefer-offline --no-audit
          else
            echo "ERROR: No package.json found!"
            exit 1
          fi

      - name: Run ESLint
        env:
          # Provide dummy values for any environment variables needed during linting
          AWS_REGION: us-east-1
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret
        run: |
          echo "Running ESLint on src directory..."
          npx eslint src --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
          npx eslint src --ext .js,.jsx,.ts,.tsx || true
        continue-on-error: true

      - name: Run Prettier Check
        run: |
          echo "Running Prettier check..."
          npx prettier --check . || true
        continue-on-error: true

      - name: Upload Linting Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linting-results
          path: eslint-results.json
          retention-days: 5

  # Stage 3: CodeQL Analysis (Sequential - runs after Linting)
  codeql:
    name: üîí CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: linting  # Wait for Linting to complete
    continue-on-error: true  # Warn but don't fail
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Node.js for CodeQL
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for CodeQL
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-codeql-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci with existing package-lock.json"
            npm ci --prefer-offline --no-audit
          else
            echo "No package-lock.json found, using npm install"
            npm install --prefer-offline --no-audit
          fi

      - name: Build for CodeQL
        env:
          # Provide dummy values for build-time environment variables
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_S3_BUCKET: dummy
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3000
        run: npm run build:docker

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Stage 4: Build Application (Sequential - runs after CodeQL)
  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: codeql  # Wait for CodeQL to complete
    if: always()  # Run even if previous jobs failed (since they're warnings)
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for Build
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-build-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci with existing package-lock.json"
            npm ci --prefer-offline --no-audit
          else
            echo "No package-lock.json found, using npm install"
            npm install --prefer-offline --no-audit
          fi

      - name: Run tests
        run: |
          npm test -- --coverage --watchAll=false || true
        continue-on-error: true

      - name: Build application
        env:
          # Provide dummy values for build-time environment variables
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_S3_BUCKET: dummy
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3000
        run: npm run build:docker

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 5: Docker Image Vulnerability Scan with Trivy (Sequential - runs after Build)
  trivy-scan:
    name: üõ°Ô∏è Trivy Docker Image Scan
    runs-on: ubuntu-latest
    needs: build  # Wait for Build to complete
    continue-on-error: true  # Warn but don't fail
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif
          retention-days: 5

  # Stage 6: Deploy to EKS Cluster (Sequential - runs after Trivy)
  deploy:
    name: üöÄ Deploy to EKS
    runs-on: ubuntu-latest
    needs: trivy-scan  # Wait for Trivy to complete
    if: always() && needs.build.result == 'success'  # Only deploy if build succeeded
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update ECR Secret
        run: |
          kubectl create secret docker-registry ecr-secret \
            --docker-server=${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
            -n ${{ env.KUBERNETES_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update deployment image
        run: |
          # Update the image tag in deployment file
          if [ -f vibecoding/k8s/app-deployment.yaml ]; then
            sed -i "s|image: .*|image: ${{ needs.build.outputs.image-tag }}|g" vibecoding/k8s/app-deployment.yaml
          elif [ -f k8s/app-deployment.yaml ]; then
            sed -i "s|image: .*|image: ${{ needs.build.outputs.image-tag }}|g" k8s/app-deployment.yaml
          fi

      - name: Deploy to Kubernetes
        run: |
          # Deploy from vibecoding k8s directory first, then fallback to main k8s
          if [ -d "vibecoding/k8s" ]; then
            echo "Deploying from vibecoding k8s directory..."
            kubectl apply -f vibecoding/k8s/00-namespace.yaml || true
            kubectl apply -f vibecoding/k8s/postgres-simple.yaml || true
            kubectl apply -f vibecoding/k8s/app-deployment.yaml || true
            kubectl apply -f vibecoding/k8s/07-app-service.yaml || true
          elif [ -d "k8s" ]; then
            echo "Deploying from main k8s directory..."
            kubectl apply -f k8s/00-namespace.yaml || true
            kubectl apply -f k8s/postgres-simple.yaml || kubectl apply -f k8s/04-postgres-deployment.yaml || true
            kubectl apply -f k8s/app-deployment.yaml || true
            kubectl apply -f k8s/07-app-service.yaml || kubectl apply -f k8s/app-service-nodeport.yaml || true
          fi

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/insurance-app-deployment -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s

      - name: Get service URL
        id: get-url
        run: |
          EXTERNAL_IP=$(kubectl get svc insurance-app-service -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
          echo "### üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "Application URL: http://$EXTERNAL_IP" >> $GITHUB_STEP_SUMMARY

      - name: Health Check
        run: |
          sleep 30  # Wait for LoadBalancer to be ready
          EXTERNAL_IP=$(kubectl get svc insurance-app-service -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://$EXTERNAL_IP/api/health || echo "Health check failed, but deployment completed"

      - name: Deployment Summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: ${{ env.KUBERNETES_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} >> $GITHUB_STEP_SUMMARY

  # Post-deployment notifications (Sequential - runs after Deploy)
  notify:
    name: üì¢ Post-Deployment Notifications
    runs-on: ubuntu-latest
    needs: deploy  # Wait for Deploy to complete
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed!"
          fi
